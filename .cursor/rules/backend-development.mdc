---
description:
globs:
alwaysApply: false
---
# Backend Development Rules

## FastAPI + SQLAlchemy + PostgreSQL

### Микросервисная архитектура

#### Сервисы
- **Auth Service**: [services/auth_service/](mdc:services/auth_service/) - аутентификация и авторизация
- **Results Service**: [services/results_service/](mdc:services/results_service/) - управление результатами тестов
- **Quiz Service**: [services/quiz_service/](mdc:services/quiz_service/) - управление тестами и вопросами
- **Shared**: [services/shared/](mdc:services/shared/) - общие компоненты

#### Структура сервиса
```
service/
├── app/
│   ├── main.py          # FastAPI приложение
│   ├── config.py        # Конфигурация
│   ├── db.py           # База данных
│   ├── models.py       # SQLAlchemy модели
│   ├── schemas.py      # Pydantic схемы
│   ├── dependencies.py # FastAPI зависимости
│   ├── api/           # API endpoints
│   └── services/      # Бизнес-логика
├── alembic.ini        # Миграции
└── Dockerfile         # Контейнеризация
```

### Стандарты кода

#### Python код
```python
# Type hints обязательны
from typing import List, Optional
from pydantic import BaseModel

class UserCreate(BaseModel):
    email: str
    password: str
    name: Optional[str] = None

# SQLAlchemy модели
class User(Base):
    __tablename__ = "users"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    email = Column(String, unique=True, nullable=False)
    name = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
```

#### FastAPI endpoints
```python
# Структурированные endpoints
@router.post("/users/", response_model=UserResponse)
async def create_user(
    user_data: UserCreate,
    db: AsyncSession = Depends(get_db)
) -> UserResponse:
    """Создание нового пользователя."""
    return await user_service.create_user(db, user_data)
```

### База данных

#### PostgreSQL
- Асинхронное подключение через [asyncpg](mdc:services/auth_service/app/db.py)
- [SQLAlchemy 2.0](mdc:services/auth_service/app/models.py) для ORM
- [Alembic](mdc:services/auth_service/alembic.ini) для миграций

#### Миграции
```bash
# Создание миграции
make auth_service_migrate

# Применение миграций
make auth_service_upgrade
```

#### Модели данных
```python
# Базовые поля
class BaseModel:
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
```

### API Design

#### RESTful принципы
- Используйте HTTP методы правильно (GET, POST, PUT, DELETE)
- Статус коды: 200, 201, 400, 401, 404, 500
- Версионирование API через URL или headers

#### Валидация
```python
# Pydantic схемы
class QuizCreate(BaseModel):
    title: str = Field(..., min_length=1, max_length=200)
    description: Optional[str] = Field(None, max_length=1000)
    questions: List[QuestionCreate] = Field(..., min_items=1)
```

### Безопасность

#### Аутентификация
- JWT токены для API
- Refresh tokens для безопасности
- Password hashing с bcrypt

#### Авторизация
```python
# Dependency для проверки прав
async def get_current_user(
    token: str = Depends(oauth2_scheme),
    db: AsyncSession = Depends(get_db)
) -> User:
    return await auth_service.verify_token(db, token)
```

### Обработка ошибок

#### Exception handling
```python
# Кастомные исключения
class UserNotFoundError(Exception):
    pass

class DuplicateEmailError(Exception):
    pass

# HTTP exception handlers
@router.exception_handler(UserNotFoundError)
async def user_not_found_handler(request: Request, exc: UserNotFoundError):
    return JSONResponse(
        status_code=404,
        content={"detail": "User not found"}
    )
```

### Тестирование

#### Unit тесты
```python
# pytest + pytest-asyncio
async def test_create_user():
    user_data = UserCreate(email="test@example.com", password="password123")
    user = await user_service.create_user(db, user_data)
    assert user.email == "test@example.com"
```

#### Integration тесты
- Тестирование API endpoints
- Тестирование с реальной базой данных
- Mock внешних сервисов

### Логирование

#### Structured logging
```python
import logging
from structlog import get_logger

logger = get_logger()

logger.info("User created", user_id=user.id, email=user.email)
```

### Мониторинг

#### Health checks
```python
@router.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.utcnow()}
```

### Развертывание

#### Docker
- [Dockerfile](mdc:services/auth_service/Dockerfile) для каждого сервиса
- [docker-compose.yml](mdc:docker-compose.yml) для оркестрации
- Environment variables для конфигурации

#### Команды
```bash
# Запуск всех сервисов
make build

# Разработка
make dev

# Логи
make logs
```

### Производительность

#### Оптимизация
- Асинхронные операции
- Connection pooling для БД
- Caching с Redis (при необходимости)
- Pagination для больших списков

#### Database optimization
- Индексы для часто используемых полей
- Query optimization
- Database connection pooling
